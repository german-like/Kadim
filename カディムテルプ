<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <title>TerpstraÈ¢®ÈçµÁõ§</title>
  <style>
    body {
      font-family: sans-serif;
      padding: 20px;
    }

    .terp-keyboard {
      display: flex;
      flex-wrap: wrap;
      width: fit-content;
      gap: 2px;
    }

    .terp-row {
      display: flex;
    }

    .terp-row.offset {
      margin-left: 22px;
    }

    .terp-key {
      width: 40px;
      height: 40px;
      background: white;
      border: 1px solid #444;
      text-align: center;
      line-height: 40px;
      font-size: 12px;
      box-sizing: border-box;
      cursor: pointer;
      user-select: none;
      transition: background 0.1s;
    }

    .terp-key.active {
      background: #88f;
      color: white;
    }

    #controls {
      margin: 1em 0;
    }

    button {
      padding: 6px 12px;
    }
  </style>
</head>
<body>
  <h2>TerpstraÈ¢®ÈçµÁõ§</h2>
  <div id="controls">
    <button id="startRec">‚è∫Ô∏è Èå≤Èü≥ÈñãÂßã</button>
    <button id="stopRec" disabled>‚èπ Èå≤Èü≥ÂÅúÊ≠¢</button>
    <a id="downloadLink" style="display:none;" download="recording.wav">üóÉÔ∏è „ÉÄ„Ç¶„É≥„É≠„Éº„Éâ</a>
  </div>

  <div class="terp-keyboard" id="keyboard"></div>

  <script>
    const audioCtx = new (window.AudioContext || window.webkitAudioContext)();
    const destination = audioCtx.createMediaStreamDestination();
    const ratios = [
      [1,1], [49,45], [63,55], [25,21], [9,7], [7,5], [51,35], [11,7],
      [5,3], [9,5], [21,11], [55,27], [15,7], [7,3], [27,11], [55,21],
      [25,9], [3,1]
    ];
    const baseFreq = 110;  // Hz
    const keysPerRow = 6;
    const rows = Math.ceil(ratios.length / keysPerRow);
    const keyElements = [];
    const playingOscillators = new Map();

    // Èå≤Èü≥Èñ¢ÈÄ£
    let mediaRecorder = new MediaRecorder(destination.stream);
    let recordedChunks = [];

    mediaRecorder.ondataavailable = e => recordedChunks.push(e.data);
    mediaRecorder.onstop = () => {
      const blob = new Blob(recordedChunks, { type: 'audio/webm' });
      const url = URL.createObjectURL(blob);
      const link = document.getElementById("downloadLink");
      link.href = url;
      link.style.display = "inline";
      link.textContent = "üóÉÔ∏è Èå≤Èü≥„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ";
    };

    function startTone(n) {
      const freq = baseFreq * (ratios[n][0] / ratios[n][1]);

      const harmonics = [1, 3, 5];
      const gains = [1.0, 0.3, 0.15];

      const nodes = [];

      harmonics.forEach((h, i) => {
        const osc = audioCtx.createOscillator();
        const gain = audioCtx.createGain();
        osc.frequency.value = freq * h;
        osc.type = "sine";

        gain.gain.setValueAtTime(gains[i], audioCtx.currentTime);

        osc.connect(gain);
        gain.connect(audioCtx.destination);
        gain.connect(destination);

        osc.start();
        nodes.push({ osc, gain });
      });

      playingOscillators.set(n, nodes);
      keyElements[n].classList.add("active");
    }

    function stopTone(n) {
      if (playingOscillators.has(n)) {
        const nodes = playingOscillators.get(n);
        const releaseTime = 0.3;
        nodes.forEach(({ osc, gain }) => {
          gain.gain.exponentialRampToValueAtTime(0.001, audioCtx.currentTime + releaseTime);
          osc.stop(audioCtx.currentTime + releaseTime);
        });
        playingOscillators.delete(n);
        keyElements[n].classList.remove("active");
      }
    }

    function createKeyboard() {
      const keyboard = document.getElementById("keyboard");
      let keyIndex = 0;

      for (let r = 0; r < rows; r++) {
        const row = document.createElement("div");
        row.className = "terp-row" + (r % 2 === 1 ? " offset" : "");
        for (let c = 0; c < keysPerRow && keyIndex < ratios.length; c++) {
          const key = document.createElement("div");
          key.className = "terp-key";
          key.textContent = keyIndex;

          key.addEventListener("pointerdown", () => startTone(keyIndex));
          key.addEventListener("pointerup", () => stopTone(keyIndex));
          key.addEventListener("pointerleave", () => stopTone(keyIndex));

          row.appendChild(key);
          keyElements.push(key);
          keyIndex++;
        }
        keyboard.appendChild(row);
      }
    }

    document.getElementById("startRec").addEventListener("click", () => {
      recordedChunks = [];
      mediaRecorder.start();
      document.getElementById("startRec").disabled = true;
      document.getElementById("stopRec").disabled = false;
    });

    document.getElementById("stopRec").addEventListener("click", () => {
      mediaRecorder.stop();
      document.getElementById("startRec").disabled = false;
      document.getElementById("stopRec").disabled = true;
    });

    createKeyboard();
  </script>
</body>
</html>
'''

display(HTML(html_code))
